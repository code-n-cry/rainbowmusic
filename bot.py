import asyncio
from aiogram import Dispatcher, Bot, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from random import randint
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State
from aiogram.utils.callback_data import CallbackData
from aiogram.types import ChatActions, InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery, ReplyKeyboardRemove, Audio
from aiogram.types.input_file import InputFile
from new_file_featuring import to_df
from tensorflow import keras
from pydub import AudioSegment 
import os
from sklearn.preprocessing import MinMaxScaler
import pandas as pd
import numpy as np


def create_model():
    keras.backend.clear_session()
    model = keras.models.Sequential([
        keras.layers.InputLayer(input_shape=(57)),
        keras.layers.Dense(units=512, activation='relu'),
        keras.layers.Dropout(0.4),
        keras.layers.Dense(units=256, activation='relu'),
        keras.layers.Dropout(0.3),
        keras.layers.Dense(units=128, activation='relu'),
        keras.layers.Dropout(0.2),
        keras.layers.Dense(units=64, activation='relu'),
        keras.layers.Dropout(0.3),
        keras.layers.Dense(units=10, activation='softmax')
    ])
    model.compile('rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])
    return model


bot_token = '5274618716:AAFR-C9zDOTU_BAUGIUMAXMkbSWsSOGqEy4'
bot = Bot(bot_token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
vote_cb = CallbackData('vote', 'action')
waiting_for_wav = State()
inline_kb_reactions = InlineKeyboardMarkup().add(InlineKeyboardButton('üëç', callback_data=vote_cb.new(action='up')), InlineKeyboardButton('üëé', callback_data=vote_cb.new(action='down')))
inline_kb_start = InlineKeyboardMarkup().add(InlineKeyboardButton('–ò–≥—Ä–∞–µ–ºüòè', callback_data='start'))
again_kb = InlineKeyboardMarkup().add(InlineKeyboardButton('–ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π?', callback_data='start'))


@dp.message_handler(commands=['start'])
async def start(message: Message):
    await ChatActions.typing(1.3)
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, *{message.from_user.first_name}*!\n–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ —Å—ã–≥—Ä–∞—Ç—å –≤ –æ–¥–Ω—É –∏–≥—Ä—É...üé≠\n*–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É* - –ø–æ–ª—É—á–∏—à—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ...',
                         parse_mode='Markdown', reply_markup=inline_kb_start)
                

@dp.callback_query_handler(lambda c: c.data == 'start')
async def start_game(query: CallbackQuery):
    await query.answer('–ù–∞—á–∞–ª–∏!')
    await bot.send_message(query.from_user.id, '*‚úÖ–ü–æ–≥–Ω–∞–ª–∏...*\n–ü—Ä–∏—Å—ã–ª–∞–π –º–Ω–µ .wav-file, –∞ —è —É–≥–∞–¥–∞—é –µ–≥–æ –∂–∞–Ω—Ä –∏ —Å–∫–∏–Ω—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—éüé∂\n(/cancel - –æ—Ç–º–µ–Ω–∞)',  parse_mode='Markdown')
    await waiting_for_wav.set()
    

@dp.message_handler(state=waiting_for_wav, content_types=['document', 'audio'])
async def process_wav(message: Message, state: FSMContext):
    if message.text == '/cancel':
        await state.finish()
        await ChatActions.typing(1)
        await message.reply('–Ø —Ç–µ–±—è *–∑–∞–ø–æ–º–Ω–∏–ª*üòà', parse_mode='Markdown')
        return
    filename = f'{randint(1, 999999)}'
    if message.audio:
        await message.audio.download(filename + '.mp3')
        sound = AudioSegment.from_mp3(filename + '.mp3') 
        sound.export(filename + '.wav', format="wav")
    if not message.document or not message.audio:
        await message.reply('–ü—Ä–∏—à–ª–∏. –ú–Ω–µ. –§–∞–π–ª.')
        return
    try:
        if message.document:
            await message.document.download(filename + '.wav')
        df = to_df(filename + '.wav')
    except asyncio.exceptions.TimeoutError:
        await message.reply('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –Ω–∞—à–µ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞üò•', reply_markup=again_kb)
        await state.finish()
        return
    except Exception as e:
        await message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç(–∏–ª–∏ –º—ã –¥—É—Ä–∞—á–∫–∏)üò≥')
        await state.finish()
        return
    recs = {
        '–ë–ª—é–∑': 'blues.wav',
        '–ö–ª–∞—Å—Å–∏–∫–∞': 'bethoven.wav',
        '–ö–∞–Ω—Ç—Ä–∏': 'reggae.wav',
        '–î–∏—Å–∫–æ': 'disco.wav',
        '–•–∏–ø-—Ö–æ–ø': 'my_name_is.wav',
        '–î–∂–∞–∑': 'jazz.wav',
        '–ú–µ—Ç–∞–ª': 'metal.wav',
        '–ü–æ–ø': '–±—É–¥–∏–ª—å–Ω–∏–∫.wav',
        '–†–µ–≥–≥–∏': 'reggae.wav',
        '–†–æ–∫': 'korol_i_shut.wav',
    }
    keras.backend.clear_session()
    model = create_model()
    scaler = MinMaxScaler()
    df = pd.DataFrame(scaler.fit_transform(df), columns=df.columns)
    model.load_weights('music2.h5')
    prediction = np.argmax(model.predict(df), axis=1)
    vals, counts = np.unique(prediction, return_counts=True)
    ind = np.argwhere(counts == np.max(counts))
    mean_genre = list(recs.keys())[ind[0][0]]
    await message.reply(f'–ñ–∞–Ω—Ä: {mean_genre}\n–û—Ü–µ–Ω–∏:', reply_markup=inline_kb_reactions)
    await bot.send_audio(message.from_user.id, InputFile(recs[mean_genre]), caption='–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è')
    os.remove(filename)
    await state.finish()
    

@dp.callback_query_handler(vote_cb.filter(action='up'))
async def like(query: CallbackQuery):
    await query.answer('Yoo!')
    await query.message.edit_text('–£–†–ê–ê–ê!!!üéâüéâüéâ')
    await bot.send_message(947243146, '+')


@dp.callback_query_handler(vote_cb.filter(action='down'))
async def dislike(query: CallbackQuery):
    await query.answer(':(')
    await query.message.edit_text('–ù—É –ª–∞–¥–Ω–æ..üò•')
    await bot.send_message(947243146, '-')


executor.start_polling(dp)
